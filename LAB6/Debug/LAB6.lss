
LAB6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000077a  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d2  00000000  00000000  0000108b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038b  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initUART9600>:
	for(i=0; Texto[i]!='\0'; i++){
		while (!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[i];
	}
	
}
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	84 b9       	out	0x04, r24	; 4
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	8a b9       	out	0x0a, r24	; 10
  9a:	8a b1       	in	r24, 0x0a	; 10
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	8a b9       	out	0x0a, r24	; 10
  a0:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a4:	e1 ec       	ldi	r30, 0xC1	; 193
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1
  aa:	80 81       	ld	r24, Z
  ac:	88 69       	ori	r24, 0x98	; 152
  ae:	80 83       	st	Z, r24
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
  b6:	80 81       	ld	r24, Z
  b8:	86 60       	ori	r24, 0x06	; 6
  ba:	80 83       	st	Z, r24
  bc:	87 e6       	ldi	r24, 0x67	; 103
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c8:	08 95       	ret

000000ca <writeUART>:

void writeUART(char Caracter){
	while(!(UCSR0A & (1<<UDRE0)));
  ca:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ce:	95 ff       	sbrs	r25, 5
  d0:	fc cf       	rjmp	.-8      	; 0xca <writeUART>
	
	UDR0 = Caracter;
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d6:	08 95       	ret

000000d8 <main>:
volatile uint8_t bufferTX;


int main(void)
{
    initUART9600();
  d8:	0e 94 48 00 	call	0x90	; 0x90 <initUART9600>
	sei();
  dc:	78 94       	sei
	writeUART('.');
	writeUART('.');
	writeUART('.');
	writeUART('\n');*/
	//writeTextUART("WOMBO COMBO POR SIEMPRE :D");
	writeUART('B');
  de:	82 e4       	ldi	r24, 0x42	; 66
  e0:	0e 94 65 00 	call	0xca	; 0xca <writeUART>
	writeUART(10);
  e4:	8a e0       	ldi	r24, 0x0A	; 10
  e6:	0e 94 65 00 	call	0xca	; 0xca <writeUART>
	writeUART(13);
  ea:	8d e0       	ldi	r24, 0x0D	; 13
  ec:	0e 94 65 00 	call	0xca	; 0xca <writeUART>
    while (1) 
    {
	PORTB = bufferTX;
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	fc cf       	rjmp	.-8      	; 0xf0 <main+0x18>

000000f8 <__vector_18>:
	
	UDR0 = Caracter;
	
}

ISR(USART_RX_vect){
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
	
	bufferTX = UDR0;
 104:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	while(!(UCSR0A & (1<<UDRE0)));
 10c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 110:	85 ff       	sbrs	r24, 5
 112:	fc cf       	rjmp	.-8      	; 0x10c <__vector_18+0x14>
	
	UDR0 = bufferTX;
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
